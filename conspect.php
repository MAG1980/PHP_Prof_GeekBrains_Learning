<?php
Лекция №1
Преимущества ООП:
● уменьшение сложности ПО;
● повышение надежности ПО;
● возможность модификации отдельных компонентов ПО без изменения остальных его
составляющих;
● возможность повторного использования отдельных компонентов ПО.



__construct() - магический метод



$this - контекст внутри объекта
$self - контекст внутри класса (срабатывает в момент инициализации, а не в момент выполнения,
поэтому при наследовании методов внутри них self будет указывать на класс-родитель (parent)),
т.е. связывание происходит слишком рано.
Для позднего статического связывания вместо self в методах класса родителя нужно использовать static.

Константы класса задаются с помощью специального слова const. Обратите внимание, что к
константе мы обращаемся с помощью конструкции «self::», а не «$this->», так как константа
принадлежит классу, а не объекту.

Статические методы и свойства принадлежат классу, а не его экземплярам.

Статические методы (функции) класса обращаться к ним извне без создания экземпляра класса, например:
echo MathOperations::RangeLength(12);
К константе класса тоже можно обратиться без создания экземпляра класса с помощью ::.
echo MathOperations::CONSTANTA;

parent::статическое свойство родителя

static
Так как статические методы вызываются без создания экземпляра класса,
то псевдопеременная $this недоступна внутри статических методов.
Доступ к статическим свойствам осуществляется с помощью оператора разрешения области видимости (::),
и к ним нельзя получить доступ через оператор объекта (->).

class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}
class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}

print $foo::$my_static . "\n";

Внутри классов можно объявлять константы
const CONSTANT = 'value';
echo self::CONSTANT; обращение к константе внутри класса.

echo $class::CONSTANT; обращение к константе снаружи по имени класса.


Модификаторы свойств объектов (области видимости):
public - позволяет обращаться к свойствам и методам отовсюду
private - доступно только внутри класса, недоступно даже наследникам, даже экземплярам данного класса.
protected - доступно только внутри класса и наследникам

Если не планируется расширять класс, то нужно использовать private
(при необходимости расширения класса можно будет понизить до protected).

Позднее статическое связывание сохраняет имя класса указанного в последнем "неперенаправленном вызове".
"Перенаправленный вызов" - это статический вызов, начинающийся с self::, parent::, static::.
    "Позднее связывание" - обращения через static:: будут вычисляться не по отношению к классу,
в котором вызываемый метод определён, а на основе информации в ходе исполнения.


Пример: Лекция 1, 1:55
Для позднего статического связывания (определения контекста унаследованного метода в момент его вызова)вместо self в
методах класса родителя нужно использовать static.

Чтобы избежать проблемы раннего связывания рекомендуется в методах классов вместо self всегда использовать static.
Это позволит контекст вызов методов определять в момент исполнения.

Всё это не касается унаследованных статичных переменных. В любом случае они будут иметь значение, определённое в
классе-родителе.